class ListNode:
    def __init__(self, value=0, next=None):
        self.value = value
        self.next = next

def add_linked_lists(l1, l2):
    dummy_head = ListNode()  # Create a dummy head node for the result linked list
    current = dummy_head  # Initialize a current pointer at the dummy head
    carry = 0  # Initialize the carry to 0

    while l1 or l2 or carry:
        # Get the values of the current nodes in l1 and l2 (if they exist)
        val1 = l1.value if l1 else 0
        val2 = l2.value if l2 else 0

        # Calculate the sum of the current digits and the carry
        total = val1 + val2 + carry

        # Calculate the carry for the next iteration
        carry = total // 10

        # Create a new node with the ones digit of the total and add it to the result
        current.next = ListNode(total % 10)
        current = current.next

        # Move to the next nodes in l1 and l2 (if they exist)
        if l1:
            l1 = l1.next
        if l2:
            l2 = l2.next

    return dummy_head.next  # Return the result linked list (skip the dummy head)

# Helper function to create a linked list from a list of digits
def create_linked_list(digits):
    dummy_head = ListNode()
    current = dummy_head
    for digit in digits:
        current.next = ListNode(digit)
        current = current.next
    return dummy_head.next

# Helper function to print a linked list
def print_linked_list(head):
    current = head
    while current:
        print(current.value, end=" -> ")
        current = current.next
    print("None")

# Example usage:
# Create two linked lists: 2 -> 4 -> 3 and 5 -> 6 -> 4 (represents 342 and 465 in reverse order)
l1 = create_linked_list([2, 4, 3])
l2 = create_linked_list([5, 6, 4])

# Add the linked lists and print the result: 7 -> 0 -> 8 (represents 807 in reverse order)
result = add_linked_lists(l1, l2)
print_linked_list(result)
