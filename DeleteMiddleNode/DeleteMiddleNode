class ListNode:
    def __init__(self, value):
        self.value = value
        self.next = None

def delete_middle_node(node_to_delete):
    if node_to_delete is None or node_to_delete.next is None:
        # You cannot delete the last node or a node that does not exist.
        return False

    # Copy the data from the next node to the current node
    node_to_delete.value = node_to_delete.next.value

    # Update the current node's next pointer to skip the next node
    node_to_delete.next = node_to_delete.next.next

    return True

# Helper function to print the linked list
def print_linked_list(head):
    current = head
    while current:
        print(current.value, end=" -> ")
        current = current.next
    print("None")

# Example usage:
# Create a linked list: 1 -> 2 -> 3 -> 4 -> 5
head = ListNode(1)
current = head
for i in range(2, 6):
    current.next = ListNode(i)
    current = current.next

# Let's delete the node with value 3
node_to_delete = head.next.next  # Node with value 3
delete_middle_node(node_to_delete)

# Print the updated linked list: 1 -> 2 -> 4 -> 5
print_linked_list(head)
